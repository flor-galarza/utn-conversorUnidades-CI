name: CI SvelteKit

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Instalar dependencias
        run: npm ci

      - name: Correr tests unitarios (Vitest)
        run: npm run test:unit

      - name: Correr tests E2E (Playwright)
        run: npx playwright install && npm run test:e2e

      - name: Notificar a Slack si CI tiene √©xito
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": ":white_check_mark: CI *exitoso* en `${{ github.repository }}`.\nüîó Ver: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notificar a Slack si CI falla
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": ":x: CI *fall√≥* en `${{ github.repository }}`.\nüõ†Ô∏è Ver detalles: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Detectar si el commit incluye un issue SCRUM-# y #start
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Commit: $COMMIT_MESSAGE"
          ISSUE_KEY=$(echo "$COMMIT_MESSAGE" | grep -oE 'SCRUM-[0-9]+')
          if [ -z "$ISSUE_KEY" ]; then
            echo "No se encontr√≥ un ISSUE_KEY en el mensaje del commit. Continuando con la build..."
            exit 0
          fi

          if echo "$COMMIT_MESSAGE" | grep -q "#start"; then
            echo "Moviendo $ISSUE_KEY a En curso (In Progress)..."
            curl --request POST \
              --url "https://florgalarza.atlassian.net/rest/api/3/issue/$ISSUE_KEY/transitions" \
              --user "${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
              --header "Content-Type: application/json" \
              --data '{"transition": {"id": "21"}}' || echo "Error al mover $ISSUE_KEY a En curso. Continuando con la build..."
          elif [ "$GITHUB_REF" == "refs/heads/main" ]; then
            echo "Moviendo $ISSUE_KEY a Finalizada (Done)..."
            curl --request POST \
              --url "https://florgalarza.atlassian.net/rest/api/3/issue/$ISSUE_KEY/transitions" \
              --user "${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
              --header "Content-Type: application/json" \
              --data '{"transition": {"id": "31"}}' || echo "Error al mover $ISSUE_KEY a Finalizada. Continuando con la build..."
          else
            echo "No se detect√≥ acci√≥n v√°lida para Jira."
          fi
        shell: bash
        continue-on-error: true

      - name: Mover a "Listo" si commit fue a main y CI pas√≥
        if: github.ref == 'refs/heads/main' && success()
        run: |
           ISSUE_KEY=$(git log -1 --pretty=%B | grep -oE 'SCRUM-[0-9]+')
           if [ -n "$ISSUE_KEY" ]; then
             echo "Moviendo $ISSUE_KEY a Finalizada..."
             curl --request POST \
               --url "https://florgalarza.atlassian.net/rest/api/3/issue/$ISSUE_KEY/transitions" \
               --user "${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
               --header "Content-Type: application/json" \
               --data '{"transition": {"id": "31"}}' || echo "Error al mover $ISSUE_KEY a Finalizada. Continuando con la build..."
           else
             echo "No se encontr√≥ un ISSUE_KEY en el mensaje del commit. Continuando con la build..."
           fi
        shell: bash
        continue-on-error: true

      # --- Nuevo Job para Docker ---
  docker-build-push:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Solo ejecutar en pushes a main
    
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/utn-conversorunidades-ci:latest
            ghcr.io/${{ github.repository_owner }}/utn-conversorunidades-ci:${{ github.sha }}
          file: ./Dockerfile

  # --- Job existente para Netlify (con ajustes) ---
  deploy-netlify:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && success()

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Instalar dependencias
        run: npm ci

      - name: Build para Netlify
        run: npm run build

      - name: Instalar Netlify CLI
        run: npm install -g netlify-cli

      - name: Desplegar a Netlify
        run: netlify deploy --prod --dir=build --auth=${{ secrets.NETLIFY_AUTH_TOKEN }} --site=${{ secrets.NETLIFY_SITE_ID }}