###############################################################################
# üöÄ CONFIGURACI√ìN INICIAL DEL WORKFLOW
###############################################################################
name: CI SvelteKit  # Nombre √©pico del workflow que aparecer√° en GitHub Actions

# -----------------------------------------------
# üïπÔ∏è DISPARADORES DEL WORKFLOW (CU√ÅNDO SE EJECUTA)
# -----------------------------------------------
on:
  push:
    branches: ["*"]  # Se activa en push a CUALQUIER rama (¬°cuidado con esto en producci√≥n!)
  pull_request:
    branches: [main]  # Tambi√©n en PRs dirigidas a 'main' (lo m√°s com√∫n)

###############################################################################
# üèóÔ∏è JOBS (TRABAJOS PARALELIZABLES)
###############################################################################
jobs:
  # ==============================================
  # üîç JOB 1: BUILD & TEST (La base de todo)
  # ==============================================
  build-test:
    runs-on: ubuntu-latest  # Ejecuta en una m√°quina virtual Ubuntu fresquita

    # --------------------------
    # üß© PASOS DEL JOB
    # --------------------------
    steps:
      # Paso 1: Obtener el c√≥digo (como un git clone)
      - name: Checkout c√≥digo
        uses: actions/checkout@v4  # Acci√≥n oficial de GitHub para clonar el repo

      # Paso 2: Instalar Node.js (¬°sin esto no hay nada!)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20  # Versi√≥n LTS de Node (cambia esto si usas otra)

      # Paso 3: Instalar dependencias (m√°s r√°pido que npm install)
      - name: Instalar dependencias
        run: npm ci  # CI = Clean Install (usa package-lock.json exactamente)

      # Paso 4: Tests unitarios (¬°que no explote nada!)
      - name: Correr tests unitarios (Vitest)
        run: npm run test:unit  # Ejecuta Vitest (aseg√∫rate de tener el script)

      # Paso 5: Tests E2E con Playwright (navegador real)
      - name: Correr tests E2E (Playwright)
        run: |  # Multil√≠nea: instala Playwright y corre tests
          npx playwright install  # Instala browsers para testing
          npm run test:e2e  # Ejecuta los tests E2E

      # -----------------------------------
      # üì¢ NOTIFICACIONES A SLACK (√âXITO)
      # -----------------------------------
      - name: Notificar a Slack si CI tiene √©xito
        if: success()  # Solo si TODO lo anterior funcion√≥
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |  # Mensaje en formato JSON
            {
              "text": ":white_check_mark: CI *exitoso* en `${{ github.repository }}`.\nüîó Ver: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}  # Secreto con la URL del webhook

      # -----------------------------------
      # üì¢ NOTIFICACIONES A SLACK (FALLO)
      # -----------------------------------
      - name: Notificar a Slack si CI falla
        if: failure()  # Justo lo contrario al anterior
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": ":x: CI *fall√≥* en `${{ github.repository }}`.\nüõ†Ô∏è Ver detalles: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # --------------------------------------------------
      # üé´ INTEGRACI√ìN CON JIRA (DETECCI√ìN DE ISSUES)
      # --------------------------------------------------
      - name: Detectar si el commit incluye un issue SCRUM-# y #start
        run: |  # Script Bash complejo (¬°aguanta!)
          # Obtiene el mensaje del √∫ltimo commit
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Commit: $COMMIT_MESSAGE"
          
          # Busca un patr√≥n SCRUM-123 en el mensaje
          ISSUE_KEY=$(echo "$COMMIT_MESSAGE" | grep -oE 'SCRUM-[0-9]+')
          
          # Si no encuentra issue, sigue adelante
          if [ -z "$ISSUE_KEY" ]; then
            echo "No se encontr√≥ un ISSUE_KEY en el mensaje del commit. Continuando con la build..."
            exit 0
          fi

          # Si el commit tiene #start, mueve el issue a "En curso"
          if echo "$COMMIT_MESSAGE" | grep -q "#start"; then
            echo "Moviendo $ISSUE_KEY a En curso (In Progress)..."
            curl --request POST \
              --url "https://florgalarza.atlassian.net/rest/api/3/issue/$ISSUE_KEY/transitions" \
              --user "${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
              --header "Content-Type: application/json" \
              --data '{"transition": {"id": "21"}}' || echo "Error al mover $ISSUE_KEY a En curso. Continuando con la build..."
          
          # Si es merge en main, mueve a "Finalizada"
          elif [ "$GITHUB_REF" == "refs/heads/main" ]; then
            echo "Moviendo $ISSUE_KEY a Finalizada (Done)..."
            curl --request POST \
              --url "https://florgalarza.atlassian.net/rest/api/3/issue/$ISSUE_KEY/transitions" \
              --user "${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
              --header "Content-Type: application/json" \
              --data '{"transition": {"id": "31"}}' || echo "Error al mover $ISSUE_KEY a Finalizada. Continuando con la build..."
          else
            echo "No se detect√≥ acci√≥n v√°lida para Jira."
          fi
        shell: bash
        continue-on-error: true  # ¬°Que no falle el workflow por Jira!

      # --------------------------------------------------
      # üé´ JIRA PARTE 2 (MOVIMIENTO AUTOM√ÅTICO EN MAIN)
      # --------------------------------------------------
      - name: Mover a "Listo" si commit fue a main y CI pas√≥
        if: github.ref == 'refs/heads/main' && success()  # Solo en main exitosa
        run: |
           ISSUE_KEY=$(git log -1 --pretty=%B | grep -oE 'SCRUM-[0-9]+')
           if [ -n "$ISSUE_KEY" ]; then
             echo "Moviendo $ISSUE_KEY a Finalizada..."
             curl --request POST \
               --url "https://florgalarza.atlassian.net/rest/api/3/issue/$ISSUE_KEY/transitions" \
               --user "${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
               --header "Content-Type: application/json" \
               --data '{"transition": {"id": "31"}}' || echo "Error al mover $ISSUE_KEY a Finalizada. Continuando con la build..."
           else
             echo "No se encontr√≥ un ISSUE_KEY en el mensaje del commit. Continuando con la build..."
           fi
        shell: bash
        continue-on-error: true

  # ==============================================
  # üê≥ JOB 2: DOCKER BUILD & PUSH (¬°Contenerizaci√≥n!)
  # ==============================================
  docker-build-push:
    needs: build-test  # Depende del job anterior
    runs-on: ubuntu-latest
    
    # Permisos necesarios para GHCR (GitHub Container Registry)
    permissions:
      packages: write  # Para subir im√°genes
      contents: read   # Para leer el c√≥digo

    steps:
      # Paso 1: Obtener el c√≥digo (again)
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      # Paso 2: Configurar Docker Buildx (para builds multi-arch)
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Paso 3: Login en GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io  # Registro de GitHub
          username: ${{ github.actor }}  # Tu usuario
          password: ${{ secrets.GITHUB_TOKEN }}  # Token autom√°tico

      # Paso 4: Construir y subir la imagen
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .  # Usa el directorio actual
          push: true  # ¬°Sube la imagen!
          tags: |  # Tags para la imagen
            ghcr.io/${{ github.repository_owner }}/utn-conversorunidades-ci:latest
            ghcr.io/${{ github.repository_owner }}/utn-conversorunidades-ci:${{ github.sha }}  # Tag √∫nico por commit
          file: ./Dockerfile  # Ruta al Dockerfile
      
      # Notificaci√≥n de √©xito en Slack
      - name: Notificar a Slack si Docker build/push fue exitoso
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": ":whale: Docker build/push *exitoso* en `${{ github.repository }}`.\nüîó Ver: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # Notificaci√≥n de fallo en Slack
      - name: Notificar a Slack si Docker build/push fall√≥
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": ":x: Docker build/push *fall√≥* en `${{ github.repository }}`.\nüõ†Ô∏è Ver detalles: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ==============================================
  # üåê JOB 3: DEPLOY A NETLIFY (¬°A producci√≥n!)
  # ==============================================
  deploy-netlify:
    needs: build-test  # Depende del primer job
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && success()  # Solo en main exitosa

    steps:
      # Paso 1: Obtener el c√≥digo (s√≠, otra vez)
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      # Paso 2: Instalar Node.js (Netlify necesita buildear)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Paso 3: Instalar dependencias
      - name: Instalar dependencias
        run: npm ci

      # Paso 4: Build para producci√≥n
      - name: Build para Netlify
        run: npm run build  # Aseg√∫rate de que este script exista

      # Paso 5: Instalar CLI de Netlify
      - name: Instalar Netlify CLI
        run: npm install -g netlify-cli  # Instalaci√≥n global

      # Paso 6: ¬°Despliegue!
      - name: Desplegar a Netlify
        run: netlify deploy --prod --dir=build --auth=${{ secrets.NETLIFY_AUTH_TOKEN }} --site=${{ secrets.NETLIFY_SITE_ID }}
        # --prod: despliegue producci√≥n
        # --dir: carpeta con los archivos est√°ticos
        # --auth: token de Netlify (secreto)
        # --site: ID del sitio (secreto)