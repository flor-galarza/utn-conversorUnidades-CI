name: CI SvelteKit

# -----------------------------------------------
# üïπÔ∏è DISPARADORES DEL WORKFLOW (CU√ÅNDO SE EJECUTA)
# -----------------------------------------------
on:
  push:
    branches: ['*']
  pull_request:
    branches: [main]

jobs:
  # ==============================================
  # üîç JOB 1: BUILD & TEST (La base de todo)
  # ==============================================
  build-test:
    runs-on: ubuntu-latest # Ejecuta en una m√°quina virtual Ubuntu

    steps:
      # Paso 1: Obtener el c√≥digo (como un git clone)
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      # Paso 2: Instalar Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Paso 3: Instalar dependencias
      - name: Instalar dependencias
        run: npm ci # CI significa "clean install"

      # Paso 4: Tests unitarios
      - name: Correr tests unitarios (Vitest)
        run: npm run test:unit

      # Paso 5: Tests E2E con Playwright (navegador real)
      - name: Correr tests E2E (Playwright)
        run: | # Multil√≠nea: instala Playwright y corre tests
          npx playwright install 
          npm run test:e2e

      # Paso 6: Chequear formato y lint
      - name: Chequear formato y lint (Prettier + ESLint)
        run: npm run lint

      # Paso 7: Generar la build de producci√≥n
      - name: Guardar build como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: build

      # Nuevo job para deploy a GitHub Pages:
  deploy-gh-pages:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Descargar build
        uses: actions/download-artifact@v4
        with:
          name: build
          path: build

      - name: Deploy a GitHub Pages
        env:
          ADAPTER: static
          GITHUB_PAGES: true
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build

      # -----------------------------------
      # üì¢ NOTIFICACIONES A SLACK (√âXITO)
      # -----------------------------------
      - name: Notificar a Slack si CI tiene √©xito
        if: success() # Solo si TODO lo anterior funcion√≥
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: | # Mensaje en formato JSON
            {
              "text": ":white_check_mark: CI *exitoso* en `${{ github.repository }}`.\nüîó Ver: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # Secreto con la URL del webhook

      # -----------------------------------
      # üì¢ NOTIFICACIONES A SLACK (FALLO)
      # -----------------------------------
      - name: Notificar a Slack si CI falla
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": ":x: CI *fall√≥* en `${{ github.repository }}`.\nüõ†Ô∏è Ver detalles: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # --------------------------------------------------
      # üé´ INTEGRACI√ìN CON JIRA (DETECCI√ìN Y MOVIMIENTO DE ISSUES)
      # --------------------------------------------------
      - name: Mover a "En curso" o "Finalizada"
        run: |
          # Obtiene el mensaje del √∫ltimo commit
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Commit: $COMMIT_MESSAGE"

          # Busca un patr√≥n SCRUM-123 en el mensaje
          ISSUE_KEY=$(echo "$COMMIT_MESSAGE" | grep -oE 'SCRUM-[0-9]+')

          # Si no encuentra issue, termina el paso exitosamente
          if [ -z "$ISSUE_KEY" ]; then
            echo "No se encontr√≥ un ISSUE_KEY en el mensaje del commit. Continuando con la build..."
            exit 0
          fi

          # Si el commit tiene #start, mueve el issue a "En curso"
          if echo "$COMMIT_MESSAGE" | grep -q "#start"; then
            echo "Moviendo $ISSUE_KEY a En curso (In Progress)..."
            curl --request POST \
              --url "https://florgalarza.atlassian.net/rest/api/3/issue/$ISSUE_KEY/transitions" \
              --user "${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
              --header "Content-Type: application/json" \
              --data '{"transition": {"id": "21"}}' || echo "Error al mover $ISSUE_KEY a En curso. Continuando con la build..."
          fi

          # Si es push exitoso a main, mueve el issue a "Finalizada"
          if [ "${GITHUB_REF}" = "refs/heads/main" ]; then
            echo "Moviendo $ISSUE_KEY a Finalizada (Done)..."
            curl --request POST \
              --url "https://florgalarza.atlassian.net/rest/api/3/issue/$ISSUE_KEY/transitions" \
              --user "${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
              --header "Content-Type: application/json" \
              --data '{"transition": {"id": "31"}}' || echo "Error al mover $ISSUE_KEY a Finalizada. Continuando con la build..."
          fi

          exit 0
        shell: bash
        continue-on-error: true

  # ===============================
  # üê≥ JOB 2: DOCKER BUILD & PUSH
  # ===============================
  docker-build-push:
    needs: build-test # Depende del primer job (build-test)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    # Permisos necesarios para GHCR (GitHub Container Registry)
    permissions:
      packages: write
      contents: read

    steps:
      # Paso 1: Obtener el c√≥digo (como un git clone)
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      # Paso 2: Configurar Docker Buildx (para builds multi-arch)
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Paso 3: Login en GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io # Registro de GitHub
          username: ${{ github.actor }} # Tu usuario
          password: ${{ secrets.GITHUB_TOKEN }} # Token autom√°tico

      # Paso 4: Construir y subir la imagen
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/utn-conversorunidades-ci:latest
            ghcr.io/${{ github.repository_owner }}/utn-conversorunidades-ci:${{ github.sha }}
          file: ./Dockerfile # Ruta al Dockerfile

      # Notificaci√≥n de √©xito en Slack
      - name: Notificar a Slack si Docker build/push fue exitoso
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": ":whale: Docker build/push *exitoso* en `${{ github.repository }}`.\nüîó Ver: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # Notificaci√≥n de fallo en Slack
      - name: Notificar a Slack si Docker build/push fall√≥
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": ":x: Docker build/push *fall√≥* en `${{ github.repository }}`.\nüõ†Ô∏è Ver detalles: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
